// Source : https://leetcode.com/problems/unique-paths-ii/
// Author : Siyuan Xu
// Date   : 2015-08-10

/********************************************************************************** 
* 
* Follow up for "Unique Paths":
* 
* Now consider if some obstacles are added to the grids. How many unique paths would there be?
* 
* An obstacle and empty space is marked as 1 and 0 respectively in the grid.
* 
* For example,
* There is one obstacle in the middle of a 3x3 grid as illustrated below.
* 
* [
*   [0,0,0],
*   [0,1,0],
*   [0,0,0]
* ]
* 
* The total number of unique paths is 2.
* 
* Note: m and n will be at most 100.
*               
**********************************************************************************/



//1d rolling dp
//4ms(best)

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if (obstacleGrid.empty()) return 0; 
		int m = obstacleGrid.size();
		int n = obstacleGrid[0].size();
		if (obstacleGrid[0][0] == 1 || obstacleGrid[m - 1][n - 1] == 1) return 0;
		vector<int> dp(n, 0);
		dp[n - 1] = 1;
		for (int i = m - 1; i >= 0; i--) {
			if ((dp[n - 1] == 1) && (obstacleGrid[i][n - 1] == 1)) dp[n - 1] = 0;
			for (int j = n - 2; j >= 0; j--) {
				dp[j] = (obstacleGrid[i][j] == 1) ? 0 : dp[j] + dp[j + 1];
			}
		}
		return dp[0];
    }
};
